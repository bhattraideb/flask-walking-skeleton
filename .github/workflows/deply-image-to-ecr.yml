name: Deploy Docker Image To AWS ECR

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Configure AWS credentials
  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_REGION }}

  - name: Print info
    run: |
      echo ${{ secrets.AWS_REGION }} | sed 's/./& /g'
      echo ${{ secrets.AWS_ACCESS_KEY_ID }} | sed 's/./& /g'


#  SpinupInfra:
#    name: Terraform plan validate and apply
#    runs-on: ubuntu-latest
#    environment: production
#    env:
#      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v3
#
##      - name: Add profile credentials to ~/.aws/credentials
##        run: |
##          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile tf-user-for-test
##          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile tf-user-for-test
##          aws configure set aws_region ${{ secrets.AWS_DEFAULT_REGION }} --profile tf-user-for-test
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
##          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
##          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
##          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
#          aws-access-key-id: $AWS_ACCESS_KEY_ID
#          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
#          aws-region: $AWS_REGION

#      - name: Terraform Format & Plan
##        uses: aws-actions/configure-aws-credentials@v4
##        with:
##          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
##          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
##          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
#        run: |
#          cd terraform
#          terraform init --reconfigure
#          terraform fmt
#          terraform plan
#
#      - name: Terraform Apply
#        id: terraform_apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        env:
#          ECR_REGISTRY: ${{ steps.terraform_apply.outputs.ecr_repo_url }}
#          ECR_REPOSITORY: ${{ steps.terraform_apply.outputs.ecr_repo_name }}
#        run: |
#          cd terraform
#          terraform init --reconfigure
#          terraform apply -auto-approve
#          echo $ECR_REGISTRY
#          echo $ECR_REPOSITORY
#
#  ECRDeployment:
#    name: Build Docker Image and Push to ECR
#    needs: [SpinupInfra]
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout
#        uses: actions/checkout@v2
#
#      - name: Setup AWS ECR Details
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-aws-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Build and push the tagged docker image to ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
#          ECR_REPOSITORY: 'cloud-native-flask-api'       #${{ steps.login-aws-ecr.outputs.ecr_repo_name }}
#          IMAGE_TAG: latest
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
